/*
Copyright 2019-2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package loader

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"regexp"
	"sync"

	"github.com/photowey/parsergo/sets"
	"golang.org/x/tools/go/packages"
)

type Package struct {
	*packages.Package
	imports map[string]*Package
	loader  *loader
	sync.Mutex
}

type loader struct {
	Roots      []*Package
	conf       *packages.Config
	packages   map[*packages.Package]*Package
	packagesMu sync.Mutex
}

func LoadRoots(rootPaths ...string) ([]*Package, error) {
	return LoadRootsWithConfig(&packages.Config{}, rootPaths...)
}

func LoadRootsWithConfig(conf *packages.Config, roots ...string) ([]*Package, error) {
	ldr := &loader{
		conf:     conf,
		packages: make(map[*packages.Package]*Package),
	}
	ldr.conf.Mode |= packages.LoadImports | packages.NeedTypesSizes
	if ldr.conf.Fset == nil {
		ldr.conf.Fset = token.NewFileSet()
	}
	ldr.conf.BuildFlags = append([]string{"-tags", "ignore_autogenerated"}, ldr.conf.BuildFlags...)

	uniquePkgIDs := sets.NewString()

	loadPackages := func(roots ...string) ([]*Package, error) {
		rawPkgs, err := packages.Load(ldr.conf, roots...)
		if err != nil {
			return nil, err
		}
		var pkgs []*Package
		for _, rp := range rawPkgs {
			p := ldr.packageFor(rp)
			if !uniquePkgIDs.Has(p.ID) {
				pkgs = append(pkgs, p)
				uniquePkgIDs.Insert(p.ID)
			}
		}

		return pkgs, nil
	}

	if len(roots) == 0 {
		pkgs, err := loadPackages()
		if err != nil {
			return nil, err
		}
		ldr.Roots = append(ldr.Roots, pkgs...)

		return ldr.Roots, nil
	}

	var (
		pkgRoots  []string
		fspRoots  []string
		fspRootRx = regexp.MustCompile(`^\.{1,2}`)
	)
	for _, r := range roots {
		if filepath.IsAbs(r) || fspRootRx.MatchString(r) {
			fspRoots = append(fspRoots, r)
		} else {
			pkgRoots = append(pkgRoots, r)
		}
	}

	if len(pkgRoots) > 0 {
		pkgs, err := loadPackages(pkgRoots...)
		if err != nil {
			return nil, err
		}
		ldr.Roots = append(ldr.Roots, pkgs...)
	}

	if len(fspRoots) == 0 {
		return ldr.Roots, nil
	}

	defer func(d string) {
		conf.Dir = d
	}(conf.Dir)

	confDir := conf.Dir

	addNestedGoModulesToRoots := func(
		p string,
		d os.DirEntry,
		e error,
	) error {
		if e != nil {
			return e
		}
		if !d.IsDir() && filepath.Base(p) == "go.mod" {
			fspRoots = append(fspRoots, filepath.Join(filepath.Dir(p), "..."))
		}
		return nil
	}

	for i := range fspRoots {
		r := fspRoots[i]

		r = filepath.Clean(r)

		if !filepath.IsAbs(r) {
			if confDir != "" {
				r = filepath.Join(confDir, r)
			} else {
				ar, err := filepath.Abs(r)
				if err != nil {
					return nil, err
				}
				r = ar
			}
		}

		fspRoots[i] = r

		b, d := filepath.Base(r), filepath.Dir(r)

		if b == "..." {
			if err := filepath.WalkDir(
				d,
				addNestedGoModulesToRoots); err != nil {
				return nil, err
			}
		}
	}

	for _, r := range fspRoots {
		b, d := filepath.Base(r), filepath.Dir(r)

		if b != "..." {
			d = r
			b = "."
		}

		ldr.conf.Dir = d

		r = fmt.Sprintf(".%s%s", string(filepath.Separator), b)

		pkgs, err := loadPackages(r)
		if err != nil {
			return nil, err
		}
		ldr.Roots = append(ldr.Roots, pkgs...)
	}

	return ldr.Roots, nil
}

func (p *Package) Imports() map[string]*Package {
	if p.imports == nil {
		p.imports = p.loader.packagesFor(p.Package.Imports)
	}

	return p.imports
}

func (l *loader) parseFile(filename string, src []byte) (*ast.File, error) {
	file, err := parser.ParseFile(l.conf.Fset, filename, src, parser.AllErrors|parser.ParseComments)
	if err != nil {
		return nil, err
	}

	return file, nil
}

func (l *loader) packageFor(pkgRaw *packages.Package) *Package {
	if l.packages[pkgRaw] == nil {
		l.packages[pkgRaw] = &Package{
			Package: pkgRaw,
			loader:  l,
		}
	}
	return l.packages[pkgRaw]
}

func (l *loader) packagesFor(pkgsRaw map[string]*packages.Package) map[string]*Package {
	l.packagesMu.Lock()
	defer l.packagesMu.Unlock()

	out := make(map[string]*Package, len(pkgsRaw))
	for name, rawPkg := range pkgsRaw {
		out[name] = l.packageFor(rawPkg)
	}
	return out
}
